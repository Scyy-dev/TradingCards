package me.scyphers.fruitservers.tradingcards.cards;

import org.bukkit.entity.EntityType;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CardSourceTest {

    @Test
    public void fromEntityTest() {
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.DROPPED_ITEM));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.EXPERIENCE_ORB));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.AREA_EFFECT_CLOUD));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.ELDER_GUARDIAN));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.WITHER_SKELETON));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.STRAY));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.EGG));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.LEASH_HITCH));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.PAINTING));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.ARROW));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.SNOWBALL));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.FIREBALL));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.SMALL_FIREBALL));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.ENDER_PEARL));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.ENDER_SIGNAL));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.SPLASH_POTION));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.THROWN_EXP_BOTTLE));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.ITEM_FRAME));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.WITHER_SKULL));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.PRIMED_TNT));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.FALLING_BLOCK));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.FIREWORK));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.HUSK));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.SPECTRAL_ARROW));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.SHULKER_BULLET));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.DRAGON_FIREBALL));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.ZOMBIE_VILLAGER));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.SKELETON_HORSE));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.ZOMBIE_HORSE));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.ARMOR_STAND));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.DONKEY));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.MULE));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.EVOKER_FANGS));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.EVOKER));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.VEX));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.VINDICATOR));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.ILLUSIONER));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.MINECART_COMMAND));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.BOAT));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.MINECART));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.MINECART_CHEST));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.MINECART_FURNACE));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.MINECART_TNT));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.MINECART_HOPPER));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.MINECART_MOB_SPAWNER));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.CREEPER));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.SKELETON));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.SPIDER));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.GIANT));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.ZOMBIE));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.SLIME));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.GHAST));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.ZOMBIFIED_PIGLIN));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.ENDERMAN));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.CAVE_SPIDER));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.SILVERFISH));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.BLAZE));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.MAGMA_CUBE));
        assertEquals(CardSource.BOSS, CardSource.fromEntity(EntityType.ENDER_DRAGON));
        assertEquals(CardSource.BOSS, CardSource.fromEntity(EntityType.WITHER));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.BAT));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.WITCH));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.ENDERMITE));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.GUARDIAN));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.SHULKER));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.PIG));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.SHEEP));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.COW));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.CHICKEN));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.SQUID));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.WOLF));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.MUSHROOM_COW));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.SNOWMAN));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.OCELOT));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.IRON_GOLEM));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.HORSE));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.RABBIT));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.POLAR_BEAR));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.LLAMA));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.LLAMA_SPIT));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.PARROT));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.VILLAGER));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.ENDER_CRYSTAL));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.TURTLE));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.PHANTOM));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.TRIDENT));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.COD));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.SALMON));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.PUFFERFISH));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.TROPICAL_FISH));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.DROWNED));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.DOLPHIN));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.CAT));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.PANDA));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.PILLAGER));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.RAVAGER));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.TRADER_LLAMA));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.WANDERING_TRADER));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.FOX));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.BEE));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.HOGLIN));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.PIGLIN));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.STRIDER));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.ZOGLIN));
        assertEquals(CardSource.HOSTILE, CardSource.fromEntity(EntityType.PIGLIN_BRUTE));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.AXOLOTL));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.GLOW_ITEM_FRAME));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.GLOW_SQUID));
        assertEquals(CardSource.PASSIVE, CardSource.fromEntity(EntityType.GOAT));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.MARKER));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.FISHING_HOOK));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.LIGHTNING));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.PLAYER));
        assertEquals(CardSource.INVALID, CardSource.fromEntity(EntityType.UNKNOWN));
    }

}
